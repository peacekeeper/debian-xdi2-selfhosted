ProxyPass /restore/ http://localhost:8020/
ProxyPassReverse /restore/ http://localhost:8020/

Redirect /.well-known /restore/.well-known

<Proxy http://localhost:8020/*>
  Require all granted
  RewriteEngine on
  # FIXME: Workaround for mod_gnutls (Debian Bug #514005)
  RewriteCond %{SERVER_PORT} !^443$
  RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
  RequestHeader set X-Forwarded-SSL "on"
</Proxy>

<Location /.well-known/*>
  Header always set Access-Control-Allow-Origin "*"
  Header always set Access-Control-Allow-Methods "GET, OPTIONS"
</Location>

<Proxy http://localhost:8020/storage/*>

  # We MAY disable the If-Match header because:
  # remoteStorage uses this header to make sure PUTs don't overwrite newer resources.
  # Unfortunately, there seems to be a bug in node-restore related to the ETag header and file timestamps:
  # https://github.com/jcoglan/restore/issues/37
  #
  # So by unsetting If-Match, we avoid the use of timestamps for determining older and newer updates.
  # This can lead to older updates overwriting newer updates, if multiple clients connect to the same remoteStorage.
  #RequestHeader unset If-Match

  # We disable the If-None-Match header because:
  # remoteStorage uses this header to only request updated resources if they have changed.
  # Unfortunately, Apache has a bug that doesn't preserve the CORS headers on a 304 status code.
  # https://bz.apache.org/bugzilla/show_bug.cgi?id=51223
  #
  # So by unsetting If-None-Match, we avoid the 304 status code altogether.
  # This can lead to reduced efficieny since it causes unnecessary GETs for already cached resources.
  RequestHeader unset If-None-Match

</Proxy> 
